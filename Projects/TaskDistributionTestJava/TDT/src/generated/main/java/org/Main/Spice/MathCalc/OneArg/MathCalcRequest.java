// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mathcalc_onearg.proto

package org.Main.Spice.MathCalc.OneArg;

/**
 * <pre>
 * The request message containing the user's name.
 * </pre>
 *
 * Protobuf type {@code MathCalcRequest}
 */
public  final class MathCalcRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:MathCalcRequest)
    MathCalcRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use MathCalcRequest.newBuilder() to construct.
  private MathCalcRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private MathCalcRequest() {
    calcName_ = "";
    args_ = emptyDoubleList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new MathCalcRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private MathCalcRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            calcName_ = s;
            break;
          }
          case 16: {

            batchID_ = input.readInt32();
            break;
          }
          case 25: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              args_ = newDoubleList();
              mutable_bitField0_ |= 0x00000001;
            }
            args_.addDouble(input.readDouble());
            break;
          }
          case 26: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
              args_ = newDoubleList();
              mutable_bitField0_ |= 0x00000001;
            }
            while (input.getBytesUntilLimit() > 0) {
              args_.addDouble(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        args_.makeImmutable(); // C
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.Main.Spice.MathCalc.OneArg.MathcalcOnearg.internal_static_MathCalcRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.Main.Spice.MathCalc.OneArg.MathcalcOnearg.internal_static_MathCalcRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.Main.Spice.MathCalc.OneArg.MathCalcRequest.class, org.Main.Spice.MathCalc.OneArg.MathCalcRequest.Builder.class);
  }

  public static final int CALCNAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object calcName_;
  /**
   * <code>string calcName = 1;</code>
   * @return The calcName.
   */
  public java.lang.String getCalcName() {
    java.lang.Object ref = calcName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      calcName_ = s;
      return s;
    }
  }
  /**
   * <code>string calcName = 1;</code>
   * @return The bytes for calcName.
   */
  public com.google.protobuf.ByteString
      getCalcNameBytes() {
    java.lang.Object ref = calcName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      calcName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int BATCHID_FIELD_NUMBER = 2;
  private int batchID_;
  /**
   * <code>int32 BatchID = 2;</code>
   * @return The batchID.
   */
  public int getBatchID() {
    return batchID_;
  }

  public static final int ARGS_FIELD_NUMBER = 3;
  private com.google.protobuf.Internal.DoubleList args_;
  /**
   * <code>repeated double args = 3;</code>
   * @return A list containing the args.
   */
  public java.util.List<java.lang.Double>
      getArgsList() {
    return args_;
  }
  /**
   * <code>repeated double args = 3;</code>
   * @return The count of args.
   */
  public int getArgsCount() {
    return args_.size();
  }
  /**
   * <code>repeated double args = 3;</code>
   * @param index The index of the element to return.
   * @return The args at the given index.
   */
  public double getArgs(int index) {
    return args_.getDouble(index);
  }
  private int argsMemoizedSerializedSize = -1;

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (!getCalcNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, calcName_);
    }
    if (batchID_ != 0) {
      output.writeInt32(2, batchID_);
    }
    if (getArgsList().size() > 0) {
      output.writeUInt32NoTag(26);
      output.writeUInt32NoTag(argsMemoizedSerializedSize);
    }
    for (int i = 0; i < args_.size(); i++) {
      output.writeDoubleNoTag(args_.getDouble(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getCalcNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, calcName_);
    }
    if (batchID_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, batchID_);
    }
    {
      int dataSize = 0;
      dataSize = 8 * getArgsList().size();
      size += dataSize;
      if (!getArgsList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      argsMemoizedSerializedSize = dataSize;
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.Main.Spice.MathCalc.OneArg.MathCalcRequest)) {
      return super.equals(obj);
    }
    org.Main.Spice.MathCalc.OneArg.MathCalcRequest other = (org.Main.Spice.MathCalc.OneArg.MathCalcRequest) obj;

    if (!getCalcName()
        .equals(other.getCalcName())) return false;
    if (getBatchID()
        != other.getBatchID()) return false;
    if (!getArgsList()
        .equals(other.getArgsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + CALCNAME_FIELD_NUMBER;
    hash = (53 * hash) + getCalcName().hashCode();
    hash = (37 * hash) + BATCHID_FIELD_NUMBER;
    hash = (53 * hash) + getBatchID();
    if (getArgsCount() > 0) {
      hash = (37 * hash) + ARGS_FIELD_NUMBER;
      hash = (53 * hash) + getArgsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.Main.Spice.MathCalc.OneArg.MathCalcRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.Main.Spice.MathCalc.OneArg.MathCalcRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.Main.Spice.MathCalc.OneArg.MathCalcRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.Main.Spice.MathCalc.OneArg.MathCalcRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.Main.Spice.MathCalc.OneArg.MathCalcRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.Main.Spice.MathCalc.OneArg.MathCalcRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.Main.Spice.MathCalc.OneArg.MathCalcRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.Main.Spice.MathCalc.OneArg.MathCalcRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.Main.Spice.MathCalc.OneArg.MathCalcRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.Main.Spice.MathCalc.OneArg.MathCalcRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.Main.Spice.MathCalc.OneArg.MathCalcRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.Main.Spice.MathCalc.OneArg.MathCalcRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.Main.Spice.MathCalc.OneArg.MathCalcRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The request message containing the user's name.
   * </pre>
   *
   * Protobuf type {@code MathCalcRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:MathCalcRequest)
      org.Main.Spice.MathCalc.OneArg.MathCalcRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.Main.Spice.MathCalc.OneArg.MathcalcOnearg.internal_static_MathCalcRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.Main.Spice.MathCalc.OneArg.MathcalcOnearg.internal_static_MathCalcRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.Main.Spice.MathCalc.OneArg.MathCalcRequest.class, org.Main.Spice.MathCalc.OneArg.MathCalcRequest.Builder.class);
    }

    // Construct using org.Main.Spice.MathCalc.OneArg.MathCalcRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      calcName_ = "";

      batchID_ = 0;

      args_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.Main.Spice.MathCalc.OneArg.MathcalcOnearg.internal_static_MathCalcRequest_descriptor;
    }

    @java.lang.Override
    public org.Main.Spice.MathCalc.OneArg.MathCalcRequest getDefaultInstanceForType() {
      return org.Main.Spice.MathCalc.OneArg.MathCalcRequest.getDefaultInstance();
    }

    @java.lang.Override
    public org.Main.Spice.MathCalc.OneArg.MathCalcRequest build() {
      org.Main.Spice.MathCalc.OneArg.MathCalcRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.Main.Spice.MathCalc.OneArg.MathCalcRequest buildPartial() {
      org.Main.Spice.MathCalc.OneArg.MathCalcRequest result = new org.Main.Spice.MathCalc.OneArg.MathCalcRequest(this);
      int from_bitField0_ = bitField0_;
      result.calcName_ = calcName_;
      result.batchID_ = batchID_;
      if (((bitField0_ & 0x00000001) != 0)) {
        args_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.args_ = args_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.Main.Spice.MathCalc.OneArg.MathCalcRequest) {
        return mergeFrom((org.Main.Spice.MathCalc.OneArg.MathCalcRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.Main.Spice.MathCalc.OneArg.MathCalcRequest other) {
      if (other == org.Main.Spice.MathCalc.OneArg.MathCalcRequest.getDefaultInstance()) return this;
      if (!other.getCalcName().isEmpty()) {
        calcName_ = other.calcName_;
        onChanged();
      }
      if (other.getBatchID() != 0) {
        setBatchID(other.getBatchID());
      }
      if (!other.args_.isEmpty()) {
        if (args_.isEmpty()) {
          args_ = other.args_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureArgsIsMutable();
          args_.addAll(other.args_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.Main.Spice.MathCalc.OneArg.MathCalcRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.Main.Spice.MathCalc.OneArg.MathCalcRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object calcName_ = "";
    /**
     * <code>string calcName = 1;</code>
     * @return The calcName.
     */
    public java.lang.String getCalcName() {
      java.lang.Object ref = calcName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        calcName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string calcName = 1;</code>
     * @return The bytes for calcName.
     */
    public com.google.protobuf.ByteString
        getCalcNameBytes() {
      java.lang.Object ref = calcName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        calcName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string calcName = 1;</code>
     * @param value The calcName to set.
     * @return This builder for chaining.
     */
    public Builder setCalcName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      calcName_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string calcName = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearCalcName() {
      
      calcName_ = getDefaultInstance().getCalcName();
      onChanged();
      return this;
    }
    /**
     * <code>string calcName = 1;</code>
     * @param value The bytes for calcName to set.
     * @return This builder for chaining.
     */
    public Builder setCalcNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      calcName_ = value;
      onChanged();
      return this;
    }

    private int batchID_ ;
    /**
     * <code>int32 BatchID = 2;</code>
     * @return The batchID.
     */
    public int getBatchID() {
      return batchID_;
    }
    /**
     * <code>int32 BatchID = 2;</code>
     * @param value The batchID to set.
     * @return This builder for chaining.
     */
    public Builder setBatchID(int value) {
      
      batchID_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 BatchID = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearBatchID() {
      
      batchID_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.DoubleList args_ = emptyDoubleList();
    private void ensureArgsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        args_ = mutableCopy(args_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <code>repeated double args = 3;</code>
     * @return A list containing the args.
     */
    public java.util.List<java.lang.Double>
        getArgsList() {
      return ((bitField0_ & 0x00000001) != 0) ?
               java.util.Collections.unmodifiableList(args_) : args_;
    }
    /**
     * <code>repeated double args = 3;</code>
     * @return The count of args.
     */
    public int getArgsCount() {
      return args_.size();
    }
    /**
     * <code>repeated double args = 3;</code>
     * @param index The index of the element to return.
     * @return The args at the given index.
     */
    public double getArgs(int index) {
      return args_.getDouble(index);
    }
    /**
     * <code>repeated double args = 3;</code>
     * @param index The index to set the value at.
     * @param value The args to set.
     * @return This builder for chaining.
     */
    public Builder setArgs(
        int index, double value) {
      ensureArgsIsMutable();
      args_.setDouble(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated double args = 3;</code>
     * @param value The args to add.
     * @return This builder for chaining.
     */
    public Builder addArgs(double value) {
      ensureArgsIsMutable();
      args_.addDouble(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated double args = 3;</code>
     * @param values The args to add.
     * @return This builder for chaining.
     */
    public Builder addAllArgs(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureArgsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, args_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated double args = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearArgs() {
      args_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:MathCalcRequest)
  }

  // @@protoc_insertion_point(class_scope:MathCalcRequest)
  private static final org.Main.Spice.MathCalc.OneArg.MathCalcRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.Main.Spice.MathCalc.OneArg.MathCalcRequest();
  }

  public static org.Main.Spice.MathCalc.OneArg.MathCalcRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MathCalcRequest>
      PARSER = new com.google.protobuf.AbstractParser<MathCalcRequest>() {
    @java.lang.Override
    public MathCalcRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new MathCalcRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<MathCalcRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<MathCalcRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.Main.Spice.MathCalc.OneArg.MathCalcRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

